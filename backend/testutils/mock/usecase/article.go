// Code generated by MockGen. DO NOT EDIT.
// Source: ././usecase/article.go

// Package mock is a generated GoMock package.
package mock

import (
	model "backend/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArticleUsecase is a mock of ArticleUsecase interface.
type MockArticleUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockArticleUsecaseMockRecorder
}

// MockArticleUsecaseMockRecorder is the mock recorder for MockArticleUsecase.
type MockArticleUsecaseMockRecorder struct {
	mock *MockArticleUsecase
}

// NewMockArticleUsecase creates a new mock instance.
func NewMockArticleUsecase(ctrl *gomock.Controller) *MockArticleUsecase {
	mock := &MockArticleUsecase{ctrl: ctrl}
	mock.recorder = &MockArticleUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleUsecase) EXPECT() *MockArticleUsecaseMockRecorder {
	return m.recorder
}

// AllArticles mocks base method.
func (m *MockArticleUsecase) AllArticles() ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllArticles")
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllArticles indicates an expected call of AllArticles.
func (mr *MockArticleUsecaseMockRecorder) AllArticles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllArticles", reflect.TypeOf((*MockArticleUsecase)(nil).AllArticles))
}

// ArticlesPerPage mocks base method.
func (m *MockArticleUsecase) ArticlesPerPage(pageNum int) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArticlesPerPage", pageNum)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArticlesPerPage indicates an expected call of ArticlesPerPage.
func (mr *MockArticleUsecaseMockRecorder) ArticlesPerPage(pageNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArticlesPerPage", reflect.TypeOf((*MockArticleUsecase)(nil).ArticlesPerPage), pageNum)
}

// SearchInArticleTitle mocks base method.
func (m *MockArticleUsecase) SearchInArticleTitle(searchTitle string, pageNum int) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchInArticleTitle", searchTitle, pageNum)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchInArticleTitle indicates an expected call of SearchInArticleTitle.
func (mr *MockArticleUsecaseMockRecorder) SearchInArticleTitle(searchTitle, pageNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchInArticleTitle", reflect.TypeOf((*MockArticleUsecase)(nil).SearchInArticleTitle), searchTitle, pageNum)
}
