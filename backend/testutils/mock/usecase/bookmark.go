// Code generated by MockGen. DO NOT EDIT.
// Source: ././usecase/bookmark.go

// Package mock is a generated GoMock package.
package mock

import (
	model "backend/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookmarkUsecase is a mock of BookmarkUsecase interface.
type MockBookmarkUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarkUsecaseMockRecorder
}

// MockBookmarkUsecaseMockRecorder is the mock recorder for MockBookmarkUsecase.
type MockBookmarkUsecaseMockRecorder struct {
	mock *MockBookmarkUsecase
}

// NewMockBookmarkUsecase creates a new mock instance.
func NewMockBookmarkUsecase(ctrl *gomock.Controller) *MockBookmarkUsecase {
	mock := &MockBookmarkUsecase{ctrl: ctrl}
	mock.recorder = &MockBookmarkUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookmarkUsecase) EXPECT() *MockBookmarkUsecaseMockRecorder {
	return m.recorder
}

// AllBookmarkedArticle mocks base method.
func (m *MockBookmarkUsecase) AllBookmarkedArticle(userId uint) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllBookmarkedArticle", userId)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllBookmarkedArticle indicates an expected call of AllBookmarkedArticle.
func (mr *MockBookmarkUsecaseMockRecorder) AllBookmarkedArticle(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllBookmarkedArticle", reflect.TypeOf((*MockBookmarkUsecase)(nil).AllBookmarkedArticle), userId)
}

// BookmarkedArticlePerPage mocks base method.
func (m *MockBookmarkUsecase) BookmarkedArticlePerPage(userId uint, pageNum int) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookmarkedArticlePerPage", userId, pageNum)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookmarkedArticlePerPage indicates an expected call of BookmarkedArticlePerPage.
func (mr *MockBookmarkUsecaseMockRecorder) BookmarkedArticlePerPage(userId, pageNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookmarkedArticlePerPage", reflect.TypeOf((*MockBookmarkUsecase)(nil).BookmarkedArticlePerPage), userId, pageNum)
}

// PostBookmark mocks base method.
func (m *MockBookmarkUsecase) PostBookmark(userId uint, articleId string) (model.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBookmark", userId, articleId)
	ret0, _ := ret[0].(model.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBookmark indicates an expected call of PostBookmark.
func (mr *MockBookmarkUsecaseMockRecorder) PostBookmark(userId, articleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBookmark", reflect.TypeOf((*MockBookmarkUsecase)(nil).PostBookmark), userId, articleId)
}
