// Code generated by MockGen. DO NOT EDIT.
// Source: ././domain/repository/bookmark.go

// Package mock is a generated GoMock package.
package mock

import (
	model "backend/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookmarkRepository is a mock of BookmarkRepository interface.
type MockBookmarkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarkRepositoryMockRecorder
}

// MockBookmarkRepositoryMockRecorder is the mock recorder for MockBookmarkRepository.
type MockBookmarkRepositoryMockRecorder struct {
	mock *MockBookmarkRepository
}

// NewMockBookmarkRepository creates a new mock instance.
func NewMockBookmarkRepository(ctrl *gomock.Controller) *MockBookmarkRepository {
	mock := &MockBookmarkRepository{ctrl: ctrl}
	mock.recorder = &MockBookmarkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookmarkRepository) EXPECT() *MockBookmarkRepositoryMockRecorder {
	return m.recorder
}

// AllBookmarkedArticleByUserId mocks base method.
func (m *MockBookmarkRepository) AllBookmarkedArticleByUserId(userId uint) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllBookmarkedArticleByUserId", userId)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllBookmarkedArticleByUserId indicates an expected call of AllBookmarkedArticleByUserId.
func (mr *MockBookmarkRepositoryMockRecorder) AllBookmarkedArticleByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllBookmarkedArticleByUserId", reflect.TypeOf((*MockBookmarkRepository)(nil).AllBookmarkedArticleByUserId), userId)
}

// BookmarkedArticlesPerPages mocks base method.
func (m *MockBookmarkRepository) BookmarkedArticlesPerPages(userId uint, pageNum int) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookmarkedArticlesPerPages", userId, pageNum)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookmarkedArticlesPerPages indicates an expected call of BookmarkedArticlesPerPages.
func (mr *MockBookmarkRepositoryMockRecorder) BookmarkedArticlesPerPages(userId, pageNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookmarkedArticlesPerPages", reflect.TypeOf((*MockBookmarkRepository)(nil).BookmarkedArticlesPerPages), userId, pageNum)
}

// PostBookmark mocks base method.
func (m *MockBookmarkRepository) PostBookmark(bookmark *model.Bookmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBookmark", bookmark)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostBookmark indicates an expected call of PostBookmark.
func (mr *MockBookmarkRepositoryMockRecorder) PostBookmark(bookmark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBookmark", reflect.TypeOf((*MockBookmarkRepository)(nil).PostBookmark), bookmark)
}
