// Code generated by MockGen. DO NOT EDIT.
// Source: ././domain/repository/article.go

// Package mock is a generated GoMock package.
package mock

import (
	model "backend/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArticleRepository is a mock of ArticleRepository interface.
type MockArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepositoryMockRecorder
}

// MockArticleRepositoryMockRecorder is the mock recorder for MockArticleRepository.
type MockArticleRepositoryMockRecorder struct {
	mock *MockArticleRepository
}

// NewMockArticleRepository creates a new mock instance.
func NewMockArticleRepository(ctrl *gomock.Controller) *MockArticleRepository {
	mock := &MockArticleRepository{ctrl: ctrl}
	mock.recorder = &MockArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleRepository) EXPECT() *MockArticleRepositoryMockRecorder {
	return m.recorder
}

// AllArticles mocks base method.
func (m *MockArticleRepository) AllArticles() ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllArticles")
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllArticles indicates an expected call of AllArticles.
func (mr *MockArticleRepositoryMockRecorder) AllArticles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllArticles", reflect.TypeOf((*MockArticleRepository)(nil).AllArticles))
}

// ArticlesPerPages mocks base method.
func (m *MockArticleRepository) ArticlesPerPages(pageNum int) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArticlesPerPages", pageNum)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArticlesPerPages indicates an expected call of ArticlesPerPages.
func (mr *MockArticleRepositoryMockRecorder) ArticlesPerPages(pageNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArticlesPerPages", reflect.TypeOf((*MockArticleRepository)(nil).ArticlesPerPages), pageNum)
}

// SearchInArticleTitle mocks base method.
func (m *MockArticleRepository) SearchInArticleTitle(searchTitle string, pageNum int) ([]model.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchInArticleTitle", searchTitle, pageNum)
	ret0, _ := ret[0].([]model.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchInArticleTitle indicates an expected call of SearchInArticleTitle.
func (mr *MockArticleRepositoryMockRecorder) SearchInArticleTitle(searchTitle, pageNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchInArticleTitle", reflect.TypeOf((*MockArticleRepository)(nil).SearchInArticleTitle), searchTitle, pageNum)
}
